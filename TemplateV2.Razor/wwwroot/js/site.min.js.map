{"version":3,"sources":["site.js"],"names":["WebFontConfig","google","families","d","wf","createElement","s","scripts","src","async","parentNode","insertBefore","document","TOAST_DELAY_SECONDS","IDLE_SECONDS","IDLE_TIMEOUT_SECONDS","IDLE_TIMEOUT_MODAL_SECONDS","AUTO_LOGOUT_IS_ENABLED","IS_BEATING","HEARTBEAT_INTERVAL","NotifcationType","INFORMATION","SUCCESS","WARNING","ERROR","second","minute","GlobalViewModel","configJson","notificationsJson","configItems","JSON","parse","Items","filter","item","Key","Int_Value","Boolean_Value","notifications","undefined","this","initialise","$","ready","each","i","n","showNotification","Message","Type","tooltip","on","dataContainer","parent","siblings","empty","propertyName","attr","replace","val","forEach","value","append","keydown","e","el","preventDefault","test","id","relatedTarget","data","find","datetimepicker","format","date","moment","fn","dataTable","ext","errMode","settings","helpPage","message","console","log","enableAutoLogout","heartbeat","ajax","setTimeout","expiryModalSeconds","expirySeconds","expiryTime","Date","getTime","isLoggingOut","mousemove","isModalOpen","resetExpiryTime","keypress","click","setInterval","modal","backdrop","keyboard","secondsRemaining","Math","floor","window","location","getElementById","innerText","is","type","autoHide","typeCss","notificationHeading","toast","autohide","delay","resetToolTips","buildTooltipList","dictionary","list","infoItems","info","hasOwnProperty","push","length","o","getLastActionDate","session","defaultExpirationMinutes","lastSessionLogDate","last_Session_Event_Date","lastSessionEventDate","last_Session_Log_Date","lastDate","startDate","entity","created_Date","setMinutes","getMinutes"],"mappings":"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","file":"site.min.js","sourcesContent":["// Webfont loader\r\nWebFontConfig = {\r\n    google: {\r\n        families: [\r\n            'Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i'\r\n        ]\r\n    }\r\n};\r\n\r\n(function (d) {\r\n    var wf = d.createElement('script'), s = d.scripts[0];\r\n    wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js';\r\n    wf.async = true;\r\n    s.parentNode.insertBefore(wf, s);\r\n})(document);\r\n\r\n// default values\r\nTOAST_DELAY_SECONDS = 6; // toasts last 6 seconds\r\nIDLE_SECONDS = 0;\r\nIDLE_TIMEOUT_SECONDS = 120; // 2 minutes\r\nIDLE_TIMEOUT_MODAL_SECONDS = IDLE_TIMEOUT_SECONDS - 30; // 30 seconds before session expires\r\nAUTO_LOGOUT_IS_ENABLED = false;\r\nIS_BEATING = false;\r\nHEARTBEAT_INTERVAL = 5000; // milliseconds\r\n\r\n// from the Notifications/Enums.cs file\r\nconst NotifcationType = {\r\n    INFORMATION: 1,\r\n    SUCCESS: 2,\r\n    WARNING: 3,\r\n    ERROR: 4\r\n};\r\n\r\n// millisecond groups\r\nconst second = 1000;\r\nconst minute = second * 60;\r\n\r\nfunction GlobalViewModel(configJson, notificationsJson) {\r\n    var self = this;\r\n\r\n    var configItems = JSON.parse(configJson).Items;\r\n\r\n    TOAST_DELAY_SECONDS = configItems.filter(function (item) { return item.Key === 'TOAST_DELAY_SECONDS'; })[0].Int_Value;\r\n    IDLE_TIMEOUT_SECONDS = configItems.filter(function (item) { return item.Key === 'IDLE_TIMEOUT_SECONDS'; })[0].Int_Value;\r\n    IDLE_TIMEOUT_MODAL_SECONDS = configItems.filter(function (item) { return item.Key === 'IDLE_TIMEOUT_MODAL_SECONDS'; })[0].Int_Value;\r\n    AUTO_LOGOUT_IS_ENABLED = configItems.filter(function (item) { return item.Key === 'AUTO_LOGOUT_IS_ENABLED'; })[0].Boolean_Value;\r\n\r\n    var notifications = (notificationsJson === '' || notificationsJson === undefined) ? [] : JSON.parse(notificationsJson);\r\n\r\n    self.initialise = function () {\r\n\r\n        $(document).ready(function () {\r\n\r\n            // display any server rendered notifications\r\n            $(notifications).each(function (i, n) {\r\n                showNotification(n.Message, n.Type, true);\r\n            });\r\n\r\n            // enable tooltips\r\n            $('[data-toggle=\"tooltip\"]').tooltip();\r\n\r\n            // multiselect component\r\n            $('.selectpicker').on('changed.bs.select', function () {\r\n\r\n                // find any existing input fields and remove them\r\n                var dataContainer = $(this).parent('.dropdown').siblings('.selectpicker-data');\r\n                dataContainer.empty();\r\n\r\n                // generate the name property for input fields\r\n                var id = $(this).attr('id');\r\n                var propertyName = id.replace('_', '.');\r\n\r\n                // create input fields for selected values\r\n                var selectedValues = $(this).val();\r\n                selectedValues.forEach(function (value) {\r\n                    dataContainer.append(\"<input type='hidden' name='\" + propertyName + \"' value=\" + value + \"></div>\");\r\n                });\r\n\r\n            });\r\n\r\n            // datetime picker - prevent explicit user input\r\n            $(\".datetimepicker-input\").keydown(function (e, el) {\r\n                e.preventDefault();\r\n                return false();\r\n            });\r\n\r\n            // number input only\r\n            $(\".input-only-number\").keydown(function (e, el) {\r\n                if (/^\\d*$/.test(value)) {\r\n                    return true;\r\n                }\r\n                e.preventDefault();\r\n                return false();\r\n            });\r\n\r\n            // modals - pass id parameter to hidden field on modal\r\n            $('.modal').on('show.bs.modal', function (e) {\r\n\r\n                var id = $(e.relatedTarget).data('target-id');\r\n\r\n                // populate modal form id element\r\n                $(this).find('input[type=hidden][name=\"Id\"]').val(id);\r\n\r\n            });\r\n\r\n            // datapickers\r\n            $(\".datepicker\").datetimepicker({\r\n                format: 'DD/MM/YYYY'\r\n            });\r\n\r\n            $(\".timepicker\").datetimepicker({\r\n                format: 'hh:mm A'\r\n            });\r\n\r\n            $(\".datetimepicker\").datetimepicker({\r\n                format: 'DD/MM/YYYY hh:mm A'\r\n            });\r\n\r\n            $(\".datepicker, .datetimepicker, .datepicker\").on(\"change.datetimepicker\", function (e) {\r\n                if (e.date) {\r\n                    $(this).attr('data-date', moment(e.date).format('DD/MMMM/YYYY'));\r\n                }\r\n            });\r\n\r\n            // datatables ajax error handling\r\n            if ($.fn.dataTable) {\r\n                $.fn.dataTable.ext.errMode = function (settings, helpPage, message) {\r\n                    showNotification(message, NotifcationType.ERROR, false);\r\n                    console.log(message);\r\n                };\r\n            }\r\n\r\n            // auto logout feature\r\n            if (AUTO_LOGOUT_IS_ENABLED === true) {\r\n                enableAutoLogout(IDLE_TIMEOUT_MODAL_SECONDS, IDLE_TIMEOUT_SECONDS);\r\n            }\r\n        });\r\n    };\r\n}\r\n\r\nfunction heartbeat() {\r\n    if (IS_BEATING === false) {\r\n\r\n        IS_BEATING = true;\r\n        $.ajax('/Session/Heartbeat');\r\n\r\n        setTimeout(function () {\r\n            IS_BEATING = false;\r\n        }, HEARTBEAT_INTERVAL);\r\n    }\r\n}\r\n\r\n// enables the autologut feature\r\nfunction enableAutoLogout(expiryModalSeconds, expirySeconds) {\r\n    var expiryTime = new Date().getTime() + (expirySeconds * 1000);\r\n\r\n    if ($('#modalAutoLogout')[0]) { // check if we have the modal available\r\n\r\n        var isLoggingOut = false;\r\n\r\n        // reset idle timer on mouse / keypress movement\r\n        $(this).mousemove(function (e) {\r\n            if (isModalOpen() === false) {\r\n                resetExpiryTime(expirySeconds);\r\n            }\r\n        });\r\n        $(this).keypress(function (e) {\r\n            if (isModalOpen() === false) {\r\n                resetExpiryTime(expirySeconds);\r\n            }\r\n        });\r\n\r\n        $('#btnDismissAutoLogout').click(function () {\r\n            resetExpiryTime(expirySeconds);\r\n        });\r\n\r\n        setInterval(function () {\r\n            IDLE_SECONDS++;\r\n\r\n            // show the modal if the user is idle for too long\r\n            if (IDLE_SECONDS >= expiryModalSeconds) {\r\n                $('#modalAutoLogout').modal({\r\n                    backdrop: \"static\",\r\n                    keyboard: false\r\n                });\r\n\r\n                // determine how many seconds are remaining and log the user out if their session has expired\r\n                var secondsRemaining = Math.floor(((getExpiryTime() - new Date().getTime()) % (minute)) / second);\r\n                if (secondsRemaining < 0 && isLoggingOut === false) {\r\n\r\n                    secondsRemaining = 0;\r\n                    isLoggingOut = true;\r\n                    window.location = '/Account/Logout';\r\n                    return;\r\n\r\n                }\r\n\r\n                // display how many seconds are let\r\n                document.getElementById('txtAutoLogoutSecondsRemaining').innerText = secondsRemaining;\r\n            }\r\n        }, 1000); // poll every 1 second\r\n    }\r\n\r\n    function isModalOpen() {\r\n        return $('#modalAutoLogout').is(':visible');\r\n    }\r\n\r\n    function getExpiryTime() {\r\n        return expiryTime;\r\n    }\r\n\r\n    function resetExpiryTime(expirySeconds) {\r\n        expiryTime = new Date().getTime() + (expirySeconds * 1000);\r\n        IDLE_SECONDS = 0;\r\n\r\n        heartbeat();\r\n    }\r\n}\r\n\r\n// displays a toast notification\r\nfunction showNotification(message, type, autoHide) {\r\n\r\n    // determine which css class to use\r\n    var typeCss = '';\r\n    var notificationHeading = '';\r\n\r\n    if (type === NotifcationType.INFORMATION || type ===  1) {\r\n        typeCss = 'bg-primary';\r\n        notificationHeading = 'Information';\r\n    }\r\n    if (type === NotifcationType.SUCCESS || type ===  2) {\r\n        typeCss = 'bg-success';\r\n        notificationHeading = 'Success';\r\n    }\r\n    if (type === NotifcationType.WARNING || type ===  3) {\r\n        typeCss = 'bg-warning';\r\n        notificationHeading = 'Warning';\r\n    }\r\n    if (type === NotifcationType.ERROR || type ===  4) {\r\n        typeCss = 'bg-danger';\r\n        notificationHeading = 'Error';\r\n    }\r\n\r\n    // add the notification html\r\n    $(\"#notifications-container\").append('<div class=\"toast ml-auto m-4\" role=\"alert\">' +\r\n        '<div class=\"toast-header ' + typeCss + '\">' +\r\n        '<strong class=\"mr-auto text-white\">' + notificationHeading + '</strong>' +\r\n        '<button type=\"button\" class=\"ml-2 mb-1 close\" data-dismiss=\"toast\" aria-label=\"Close\">' +\r\n        '<span aria-hidden=\"true\">×</span>' +\r\n        '</button>' +\r\n        '</div>' +\r\n        '<div class=\"toast-body\">' +\r\n        message +\r\n        '</div>' +\r\n        '</div>');\r\n\r\n    // show the notification that we have just added\r\n    $('.toast:last').toast(\r\n    {\r\n        autohide: autoHide,\r\n        delay: TOAST_DELAY_SECONDS * 1000\r\n    }\r\n    ).toast('show');\r\n}\r\n\r\n// re-initializes tooltips (eg: datatables ajax callback)\r\nfunction resetToolTips() {\r\n    $('[data-toggle=\"tooltip\"]').tooltip('update');\r\n}\r\n\r\n// used to interpret a C# Dictionary<string, string> and output an html list <li>\r\nfunction buildTooltipList(dictionary) {\r\n    var list = '';\r\n\r\n    // build list items\r\n    var infoItems = [];\r\n    for (var info in dictionary) {\r\n\r\n        if (dictionary.hasOwnProperty(info)) {\r\n            infoItems.push('<li><strong>' + info + ':&nbsp;</strong>' + dictionary[info] + '</li>');\r\n        }\r\n\r\n    }\r\n\r\n    // combine into list\r\n    if (infoItems.length > 0) {\r\n\r\n        list = \"<ul class='tooltip-list'>\";\r\n        $(infoItems).each(function (i, o) {\r\n            list += o;\r\n        });\r\n        list += '</ul>';\r\n\r\n    }\r\n\r\n    return list;\r\n}\r\n\r\n// gets the last action date from the C# object 'Admin/Sessions/GetSessionResponse.cs' (JSON)\r\nfunction getLastActionDate(session, defaultExpirationMinutes) {\r\n    var lastSessionLogDate = session.last_Session_Event_Date ? new Date(session.last_Session_Event_Date) : null;\r\n    var lastSessionEventDate = session.last_Session_Log_Date ? new Date(session.last_Session_Log_Date) : null;\r\n    var lastDate = '';\r\n\r\n    // if we have both dates, compare them otherwise interrogate either one\r\n    if (lastSessionLogDate && lastSessionEventDate) {\r\n\r\n        if (lastSessionLogDate > lastSessionEventDate) {\r\n            lastDate = lastSessionLogDate;\r\n        } else {\r\n            lastDate = lastSessionEventDate;\r\n        }\r\n\r\n    } else {\r\n\r\n        if (lastSessionLogDate) {\r\n            lastDate = lastSessionLogDate;\r\n        }\r\n        else if (lastSessionEventDate) {\r\n            lastDate = lastSessionEventDate;\r\n        } else {\r\n            var startDate = new Date(session.entity.created_Date);\r\n            lastDate = new Date(startDate.setMinutes(startDate.getMinutes() + defaultExpirationMinutes));\r\n        }\r\n\r\n    }\r\n\r\n    return lastDate;\r\n}\r\n"]}